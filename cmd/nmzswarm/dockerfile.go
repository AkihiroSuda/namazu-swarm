package main

import (
	"fmt"
	"io"
	"os"
	"os/exec"
	"path/filepath"
	"text/template"

	"github.com/docker/docker/client"
	nmzswarm "github.com/osrg/namazu-swarm"
)

const dockerfileTemplate = `# generated by nmzswarm
FROM {{.Source}}
COPY nmzswarm-agent.master /.nmzswarm-agent.master
COPY nmzswarm-agent.worker /.nmzswarm-agent.worker
RUN {{.MasterScript}} > /.nmzswarm-agent.master.txt
ENTRYPOINT ["sh", "-c", "echo Please do not run this image manually; false"]
`

type dockerfileOptions struct {
	Source       string
	MasterScript string
}

func createDockerfile(dir string, opts dockerfileOptions) error {
	dockerfile := filepath.Join(dir, "Dockerfile")
	tmpl, err := template.New("").Parse(dockerfileTemplate)
	if err != nil {
		return err
	}
	f, err := os.Create(dockerfile)
	if err != nil {
		return err
	}
	defer f.Close()
	return tmpl.Execute(f, opts)
}

func copyExecutable(dir, executable string) error {
	srcPath, err := exec.LookPath(executable)
	if err != nil {
		return err
	}
	dstPath := filepath.Join(dir, filepath.Base(executable))
	src, err := os.Open(srcPath)
	if err != nil {
		return err
	}
	defer src.Close()
	dst, err := os.OpenFile(dstPath, os.O_RDWR|os.O_CREATE, 0755)
	if err != nil {
		return err
	}
	defer dst.Close()
	_, err = io.Copy(dst, src)
	return err
}

func injectImage(cli *client.Client, dir, target, source string) error {
	targetLabels, err := imageLabels(cli, source)
	if err != nil {
		return err
	}
	masterScript, ok := targetLabels[nmzswarm.ImageLabelV0MasterScript]
	if !ok {
		return fmt.Errorf("image label %q unset", nmzswarm.ImageLabelV0MasterScript)
	}
	if err = createDockerfile(dir,
		dockerfileOptions{
			Source:       source,
			MasterScript: masterScript,
		}); err != nil {
		return err
	}
	for _, s := range []string{"nmzswarm-agent.master", "nmzswarm-agent.worker"} {
		if err = copyExecutable(dir, s); err != nil {
			return err
		}
	}
	// FIXME: eliminate os/exec
	return system([][]string{
		{"docker", "image", "build", "--quiet", "--tag", target, dir},
	})
}
