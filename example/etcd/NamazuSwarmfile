#!/bin/sh
set -e # exit on an error
GO_TEST="go test -race -cover"
do_info_jsonl(){
    echo '{"API":"v0"}'
}
enum_pkgs(){
    # rafttest has been disabled by default (https://github.com/coreos/etcd/pull/5707)
    go list -f '{{if len .TestGoFiles}}{{.ImportPath}}{{end}}' ./... | grep -v rafttest
}
command_jsonl() {
    flags=$1
    pkgs=$2
    echo "{\"Command\": \"$GO_TEST $flags $pkgs\"}"
}
do_enum_jsonl(){
    # e2e and integration are big; so we split them
    pkgs=$(enum_pkgs | grep -v e2e | grep -v integration)
    for pkg in $pkgs; do
	command_jsonl "-run Test" $pkg;
    done
    # FIXME: improve regexp readability
    for f in e2e integration; do
	pkg=github.com/coreos/etcd/$f
	command_jsonl "-run TestV3" $pkg
	command_jsonl "-run TestV[^3]" $pkg
	for g in a b c d e f g h i j k l m n o p q r s t u v w x y z; do
	    command_jsonl "-run TestC.*V3$g" $pkg
	done
	command_jsonl "-run TestC.*V[^3]" $pkg
	command_jsonl "-run TestC[^V]*$" $pkg
	# excludes V, C
	for g in A B D E F G H I J K L M N O P Q R S T U W X Y Z; do
	    command_jsonl "-run Test$g" $pkg
	done
    done
}
do_exec_all(){
    pkgs=$(enum_pkgs)
    export GOPATH=$GOPATH/src/github.com/coreos/etcd/gopath
    set -x
    $GO_TEST -run Test $pkgs
    set +x
}
do_exec(){
    export GOPATH=$GOPATH/src/github.com/coreos/etcd/gopath
    $@
}
case "$1" in
    "info-jsonl" ) do_info_jsonl;;
    "enum-jsonl" ) do_enum_jsonl;;
    "exec" ) shift; do_exec "$@";;
    "_exec_all" ) do_exec_all;; # _exec_all is not an API call. It is a toy for humans (e.g. benchmark)
    * ) echo "Usage: $(basename $0) info-jsonl | enum-jsonl | exec [COMMAND] | _exec_all" >&2 ; exit 1;;
esac
